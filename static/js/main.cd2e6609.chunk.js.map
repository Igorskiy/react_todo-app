{"version":3,"sources":["NewTodo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["NewTodo","state","valueTitle","inputChangeHandler","event","_this","setState","target","value","submitHandler","preventDefault","prevState","props","addTodo","id","Date","now","title","completed","editable","this","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","React","Component","TodoList","_ref","visibleTodos","todos","selectAllTodos","deleteTodo","toggleTodoCompleted","cn","hidden","length","checked","every","todo","htmlFor","map","key","concat","onClick","Footer","clearCompletedHandler","setCurrentFilter","currentFilter","filterTypes","filter","Object","values","href","selected","App","all","active","toConsumableArray","allSelected","objectSpread2","getFilteredTodos","_this$state","_this$state2","src_NewTodo","src_TodoList","src_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"kRAuDeA,6MAnDbC,MAAQ,CAAEC,WAAY,MAEtBC,mBAAqB,SAACC,GACpBC,EAAKC,SAAS,CACZJ,WAAYE,EAAMG,OAAOC,WAI7BC,cAAgB,SAACL,GACfA,EAAMM,iBAENL,EAAKC,SAAS,SAACK,GACb,OAAKA,EAAUT,YAIfG,EAAKO,MAAMC,QAAQ,CACjBC,GAAIC,KAAKC,MACTC,MAAON,EAAUT,WACjBgB,WAAW,EACXC,UAAU,IAGL,CAAEjB,WAAY,KAVZS,EAAUT,sFAcd,IACCA,EAAekB,KAAKnB,MAApBC,WAER,OACEmB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,QAAME,SAAUL,KAAKX,eACnBY,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLF,UAAU,WACVG,YAAY,yBACZnB,MAAON,EACP0B,SAAUR,KAAKjB,8BAzCL0B,IAAMC,2BC6EbC,EA1EE,SAAAC,GAAA,IACfC,EADeD,EACfC,aACAC,EAFeF,EAEfE,MACAC,EAHeH,EAGfG,eACAC,EAJeJ,EAIfI,WACAC,EALeL,EAKfK,oBALe,OAQfhB,EAAAC,EAAAC,cAAA,WAASC,UAAWc,IAClB,OACA,CAAEC,OAAyB,IAAjBL,EAAMM,UAGhBnB,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLE,SAAUO,EACVM,QAASP,EAAMQ,MAAM,SAAAC,GAAI,OAAIA,EAAKzB,YAClCJ,GAAG,aACHU,UAAU,eAEZH,EAAAC,EAAAC,cAAA,SAAOqB,QAAQ,cAtBN,wBAuBTvB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXS,EAAaY,IAAI,SAAAF,GAAI,OACpBtB,EAAAC,EAAAC,cAAA,MAAIuB,IAAKH,EAAK7B,IACZO,EAAAC,EAAAC,cAAA,MACEC,UAAWc,IACT,CAAEpB,UAAWyB,EAAKzB,aAGpBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLF,UAAU,SACVV,GAAI6B,EAAK7B,GACT2B,QAASE,EAAKzB,UACdU,SAAU,kBAAMS,EAAoBM,EAAK7B,OAE3CO,EAAAC,EAAAC,cAAA,SACEqB,QAAO,QAAAG,OAAUJ,EAAK7B,KAErB6B,EAAK1B,OAERI,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLsB,QAAS,kBAAMZ,EAAWO,EAAK7B,KAC/BU,UAAU,oBCoBXyB,EAnEA,SAAAjB,GAAA,IACbE,EADaF,EACbE,MACAgB,EAFalB,EAEbkB,sBACAC,EAHanB,EAGbmB,iBACAC,EAJapB,EAIboB,cACAC,EALarB,EAKbqB,YALa,OAObhC,EAAAC,EAAAC,cAAA,UAAQC,UAAWc,IACjB,SACA,CAAEC,OAAyB,IAAjBL,EAAMM,UAIoC,IAAjDN,EAAMoB,OAAO,SAAAX,GAAI,OAAKA,EAAKzB,YAAWsB,OAEnCnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,GAAAuB,OACMb,EAAMoB,OAAO,SAAAX,GAAI,OAAKA,EAAKzB,YAAWsB,OAD5C,eAKAnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,GAAAuB,OACMb,EAAMoB,OAAO,SAAAX,GAAI,OAAKA,EAAKzB,YAAWsB,OAD5C,gBAMNnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACX+B,OAAOC,OAAOH,GAAaR,IAAI,SAAAS,GAAM,OACpCjC,EAAAC,EAAAC,cAAA,MAAIuB,IAAKQ,GACPjC,EAAAC,EAAAC,cAAA,KACEkC,KAAI,KAAAV,OAAOO,GACXN,QAAS,kBAAMG,EAAiBG,IAChC9B,UAAWc,IACT,CAAEoB,SAAUN,IAAkBC,EAAYC,MAG3CA,OAMTjC,EAAAC,EAAAC,cAAA,UACEG,KAAK,SACLF,UAAWc,IACT,kBACA,CAAEC,OAAwD,IAAhDL,EAAMoB,OAAO,SAAAX,GAAI,OAAIA,EAAKzB,YAAWsB,SAEjDQ,QAASE,GANX,qBCkEWS,6MA1Gb1D,MAAQ,CACNiC,MAAO,GACPkB,cAAe,GACfC,YAAa,CACXO,IAAK,MACL1C,UAAW,YACX2C,OAAQ,aAIZhD,QAAU,SAAA8B,GAAI,OAAItC,EAAKC,SAAS,SAAAK,GAAS,MAAK,CAC5CuB,MAAK,GAAAa,OAAAQ,OAAAO,EAAA,EAAAP,CAAM5C,EAAUuB,OAAhB,CAAuBS,IAC5BS,cAAezC,EAAU0C,YAAYO,UAGvCzB,eAAiB,WACf9B,EAAKC,SAAS,SAACK,GACb,IAAMoD,EAAcpD,EAAUuB,MAAMQ,MAAM,SAAAC,GAAI,OAAIA,EAAKzB,YAEvD,MAAO,CACLgB,MAAOvB,EAAUuB,MAAMW,IAAI,SAAAF,GAAI,OAAAY,OAAAS,EAAA,EAAAT,CAAA,GAC1BZ,EAD0B,CAE7BzB,WAAY6C,YAMpB1B,oBAAsB,SAACvB,GACrBT,EAAKC,SAAS,SAAAK,GAAS,MAAK,CAC1BuB,MAAOvB,EAAUuB,MAAMW,IAAI,SAACF,GAC1B,OAAIA,EAAK7B,KAAOA,EACP6B,EAGFY,OAAAS,EAAA,EAAAT,CAAA,GACFZ,EADL,CAEEzB,WAAYyB,EAAKzB,oBAMzBkB,WAAa,SAACtB,GACZT,EAAKC,SAAS,SAAAK,GAAS,MAAK,CAC1BuB,MAAOvB,EAAUuB,MAAMoB,OAAO,SAAAX,GAAI,OAAIA,EAAK7B,KAAOA,UAItDoC,sBAAwB,WACtB7C,EAAKC,SAAS,SAAAK,GAAS,MAAK,CAC1BuB,MAAOvB,EAAUuB,MAAMoB,OAAO,SAAAX,GAAI,OAAKA,EAAKzB,kBAIhD+C,iBAAmB,SAACb,GAAkB,IAAAc,EACL7D,EAAKJ,MAA5BiC,EAD4BgC,EAC5BhC,MAAOmB,EADqBa,EACrBb,YAEf,OAAQD,GACN,KAAKC,EAAYnC,UAAW,OAAOgB,EAAMoB,OAAO,SAAAX,GAAI,OAAIA,EAAKzB,YAC7D,KAAKmC,EAAYQ,OAAQ,OAAO3B,EAAMoB,OAAO,SAAAX,GAAI,OAAKA,EAAKzB,YAC3D,KAAKmC,EAAYO,IACjB,QAAS,OAAO1B,MAIpBiB,iBAAmB,SAACG,GAAW,IACrBD,EAAgBhD,EAAKJ,MAArBoD,YAERhD,EAAKC,SAAS,CACZ8C,cAAeC,EAAYC,8EAItB,IAAAa,EAKH/C,KAAKnB,MAHPiC,EAFKiC,EAELjC,MACAkB,EAHKe,EAGLf,cACAC,EAJKc,EAILd,YAEIpB,EAAeb,KAAK6C,iBAAiBb,GAE3C,OACE/B,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAC6C,EAAD,CACEvD,QAASO,KAAKP,UAEhBQ,EAAAC,EAAAC,cAAC8C,EAAD,CACEnC,MAAOA,EACPD,aAAcA,EACdE,eAAgBf,KAAKe,eACrBC,WAAYhB,KAAKgB,WACjBC,oBAAqBjB,KAAKiB,sBAE5BhB,EAAAC,EAAAC,cAAC+C,EAAD,CACEpC,MAAOA,EACPgB,sBAAuB9B,KAAK8B,sBAC5BC,iBAAkB/B,KAAK+B,iBACvBE,YAAaA,EACbD,cAAeA,YApGPvB,IAAMC,WCCxByC,IAASC,OACPnD,EAAAC,EAAAC,cAACkD,EAAD,MACAC,SAASC,eAAe","file":"static/js/main.cd2e6609.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = { valueTitle: '' }\n\n  inputChangeHandler = (event) => {\n    this.setState({\n      valueTitle: event.target.value,\n    });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (!prevState.valueTitle) {\n        return prevState.valueTitle;\n      }\n\n      this.props.addTodo({\n        id: Date.now(),\n        title: prevState.valueTitle,\n        completed: false,\n        editable: false,\n      });\n\n      return { valueTitle: '' };\n    });\n  };\n\n  render() {\n    const { valueTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <form onSubmit={this.submitHandler}>\n          <h1>todos</h1>\n\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={valueTitle}\n            onChange={this.inputChangeHandler}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\nexport default NewTodo;\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst mark = 'Mark all as complete';\n\nconst TodoList = ({\n  visibleTodos,\n  todos,\n  selectAllTodos,\n  deleteTodo,\n  toggleTodoCompleted,\n}) => (\n\n  <section className={cn(\n    'main',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    <input\n      type=\"checkbox\"\n      onChange={selectAllTodos}\n      checked={todos.every(todo => todo.completed)}\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n    />\n    <label htmlFor=\"toggle-all\">{mark}</label>\n    <ul className=\"todo-list\">\n      {visibleTodos.map(todo => (\n        <li key={todo.id}>\n          <li\n            className={cn(\n              { completed: todo.completed }\n            )}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                checked={todo.completed}\n                onChange={() => toggleTodoCompleted(todo.id)}\n              />\n              <label\n                htmlFor={`todo-${todo.id}`}\n              >\n                {todo.title}\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => deleteTodo(todo.id)}\n                className=\"destroy\"\n              />\n            </div>\n          </li>\n\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  selectAllTodos: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoCompleted: PropTypes.func.isRequired,\n  visibleTodos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst Footer = ({\n  todos,\n  clearCompletedHandler,\n  setCurrentFilter,\n  currentFilter,\n  filterTypes,\n}) => (\n  <footer className={cn(\n    'footer',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    {\n      (todos.filter(todo => !todo.completed).length === 1)\n        ? (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} item left`}\n          </span>\n        )\n        : (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} items left`}\n          </span>\n        )\n    }\n\n    <ul className=\"filters\">\n      {Object.values(filterTypes).map(filter => (\n        <li key={filter}>\n          <a\n            href={`#/${filter}`}\n            onClick={() => setCurrentFilter(filter)}\n            className={cn(\n              { selected: currentFilter === filterTypes[filter] }\n            )}\n          >\n            {filter}\n          </a>\n        </li>\n      ))}\n    </ul>\n\n    <button\n      type=\"button\"\n      className={cn(\n        'clear-completed',\n        { hidden: todos.filter(todo => todo.completed).length === 0 }\n      )}\n      onClick={clearCompletedHandler}\n    >\n    clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  clearCompletedHandler: PropTypes.func.isRequired,\n  setCurrentFilter: PropTypes.func.isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  filterTypes: PropTypes.objectOf(PropTypes.string).isRequired,\n};\nexport default Footer;\n","import React from 'react';\nimport NewTodo from './NewTodo';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    currentFilter: '',\n    filterTypes: {\n      all: 'all',\n      completed: 'completed',\n      active: 'active',\n    },\n  }\n\n  addTodo = todo => this.setState(prevState => ({\n    todos: [...prevState.todos, todo],\n    currentFilter: prevState.filterTypes.all,\n  }))\n\n  selectAllTodos = () => {\n    this.setState((prevState) => {\n      const allSelected = prevState.todos.every(todo => todo.completed);\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: !allSelected,\n        })),\n      };\n    });\n  }\n\n  toggleTodoCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  clearCompletedHandler = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  getFilteredTodos = (currentFilter) => {\n    const { todos, filterTypes } = this.state;\n\n    switch (currentFilter) {\n      case filterTypes.completed: return todos.filter(todo => todo.completed);\n      case filterTypes.active: return todos.filter(todo => !todo.completed);\n      case filterTypes.all: return todos;\n      default: return todos;\n    }\n  }\n\n  setCurrentFilter = (filter) => {\n    const { filterTypes } = this.state;\n\n    this.setState({\n      currentFilter: filterTypes[filter],\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      currentFilter,\n      filterTypes,\n    } = this.state;\n    const visibleTodos = this.getFilteredTodos(currentFilter);\n\n    return (\n      <section className=\"todoapp\">\n        <NewTodo\n          addTodo={this.addTodo}\n        />\n        <TodoList\n          todos={todos}\n          visibleTodos={visibleTodos}\n          selectAllTodos={this.selectAllTodos}\n          deleteTodo={this.deleteTodo}\n          toggleTodoCompleted={this.toggleTodoCompleted}\n        />\n        <Footer\n          todos={todos}\n          clearCompletedHandler={this.clearCompletedHandler}\n          setCurrentFilter={this.setCurrentFilter}\n          filterTypes={filterTypes}\n          currentFilter={currentFilter}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}