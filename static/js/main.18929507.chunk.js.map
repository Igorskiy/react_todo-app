{"version":3,"sources":["NewTodo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["NewTodo","state","valueTitle","inputChangeHandler","event","_this","setState","target","value","submitHandler","preventDefault","prevState","props","addTodo","id","Date","now","title","completed","editable","this","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","onBlur","React","Component","TodoList","editValue","editChangeHandler","_ref","_this2","_this$props","visibleTodos","todos","selectAllTodos","deleteTodo","handleKeyPress","editTodo","setEditedValue","toggleTodoCompleted","cn","hidden","length","checked","every","todo","htmlFor","map","key","editing","onDoubleClick","concat","onClick","autoFocus","defaultValue","onKeyDown","e","Footer","clearCompletedHandler","setCurrentFilter","currentFilter","filterTypes","filter","Object","values","href","selected","App","undefined","localStorage","toConsumableArray","JSON","parse","all","active","objectSpread2","allSelected","getFilteredTodos","_this$state","setItem","stringify","_this$state2","src_NewTodo","src_TodoList","editChangeHanlder","src_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.18929507.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = { valueTitle: '' }\n\n  inputChangeHandler = (event) => {\n    this.setState({\n      valueTitle: event.target.value,\n    });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (!prevState.valueTitle) {\n        return prevState.valueTitle;\n      }\n\n      this.props.addTodo({\n        id: Date.now(),\n        title: prevState.valueTitle,\n        completed: false,\n        editable: false,\n      });\n\n      return { valueTitle: '' };\n    });\n  };\n\n  render() {\n    const { valueTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <form onSubmit={this.submitHandler}>\n          <h1>todos</h1>\n\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={valueTitle}\n            onChange={this.inputChangeHandler}\n            onBlur={this.submitHandler}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\nexport default NewTodo;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst mark = 'Mark all as complete';\n\nclass TodoList extends React.Component {\n  state = { editValue: '' }\n\n  componentWillUpdate() {\n    this.state.editValue = '';\n  }\n\n  editChangeHandler = ({ target }) => {\n    this.setState({\n      editValue: target.value,\n    });\n  }\n\n  render() {\n    const { visibleTodos,\n      todos,\n      selectAllTodos,\n      deleteTodo,\n      handleKeyPress,\n      editTodo,\n      setEditedValue,\n      toggleTodoCompleted } = this.props;\n\n    return (\n      <section className={cn(\n        'main',\n        { hidden: todos.length === 0 }\n      )}\n      >\n        <input\n          type=\"checkbox\"\n          onChange={selectAllTodos}\n          checked={todos.every(todo => todo.completed)}\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n        />\n        <label htmlFor=\"toggle-all\">{mark}</label>\n        <ul className=\"todo-list\">\n          {visibleTodos.map(todo => (\n            <li key={todo.id}>\n              <li\n                className={cn(\n                  {\n                    completed: todo.completed,\n                    editing: todo.editable,\n                  }\n                )}\n              >\n                <div className=\"view\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"toggle\"\n                    id={todo.id}\n                    checked={todo.completed}\n                    onChange={() => toggleTodoCompleted(todo.id)}\n                  />\n                  <label\n                    onDoubleClick={() => editTodo(todo.id)}\n                    htmlFor={`todo-${todo.id}`}\n                  >\n                    {todo.title}\n                  </label>\n                  <button\n                    type=\"button\"\n                    onClick={() => deleteTodo(todo.id)}\n                    className=\"destroy\"\n                  />\n                </div>\n                {todo.editable && (\n                  <input\n                    type=\"text\"\n                    className=\"edit\"\n                    autoFocus\n                    defaultValue={todo.title}\n                    onChange={this.editChangeHandler}\n                    onKeyDown={\n                      e => handleKeyPress(e, todo.id, this.state.editValue)\n                    }\n                    onBlur={\n                      e => setEditedValue(e, todo.id, this.state.editValue)\n                    }\n                  />\n                )\n                }\n              </li>\n\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\nTodoList.propTypes = {\n  selectAllTodos: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoCompleted: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n  visibleTodos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst Footer = ({\n  todos,\n  clearCompletedHandler,\n  setCurrentFilter,\n  currentFilter,\n  filterTypes,\n}) => (\n  <footer className={cn(\n    'footer',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    {\n      (todos.filter(todo => !todo.completed).length === 1)\n        ? (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} item left`}\n          </span>\n        )\n        : (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} items left`}\n          </span>\n        )\n    }\n\n    <ul className=\"filters\">\n      {Object.values(filterTypes).map(filter => (\n        <li key={filter}>\n          <a\n            href={`#/${filter}`}\n            onClick={() => setCurrentFilter(filter)}\n            className={cn(\n              { selected: currentFilter === filterTypes[filter] }\n            )}\n          >\n            {filter}\n          </a>\n        </li>\n      ))}\n    </ul>\n\n    <button\n      type=\"button\"\n      className={cn(\n        'clear-completed',\n        { hidden: todos.filter(todo => todo.completed).length === 0 }\n      )}\n      onClick={clearCompletedHandler}\n    >\n    clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  clearCompletedHandler: PropTypes.func.isRequired,\n  setCurrentFilter: PropTypes.func.isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  filterTypes: PropTypes.objectOf(PropTypes.string).isRequired,\n};\nexport default Footer;\n","import React from 'react';\nimport NewTodo from './NewTodo';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: (() => {\n      if (localStorage.todos !== undefined) {\n        return [...JSON.parse(localStorage.todos)];\n      }\n\n      return [];\n    })(),\n\n    currentFilter: 'all',\n    filterTypes: {\n      all: 'all',\n      completed: 'completed',\n      active: 'active',\n    },\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  }\n\n  setEditedValue = (event, id, value) => {\n    if (!event.target.value) {\n      this.deleteTodo(id);\n    }\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: value || todo.title,\n          editable: false,\n        };\n      }),\n    }));\n  }\n\n  editTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return {\n            ...todo,\n            editable: false,\n          };\n        }\n\n        return {\n          ...todo,\n          editable: true,\n        };\n      }),\n    }));\n  };\n\n  handleKeyPress = (event, id, value) => {\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          editable: false,\n        })),\n      }));\n    } else if (event.key === 'Enter') {\n      this.setEditedValue(event, id, value);\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  selectAllTodos = () => {\n    this.setState((prevState) => {\n      const allSelected = prevState.todos.every(todo => todo.completed);\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: !allSelected,\n        })),\n      };\n    });\n  }\n\n  toggleTodoCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  clearCompletedHandler = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  getFilteredTodos = (currentFilter) => {\n    const { todos, filterTypes } = this.state;\n\n    switch (currentFilter) {\n      case filterTypes.completed: return todos.filter(todo => todo.completed);\n      case filterTypes.active: return todos.filter(todo => !todo.completed);\n      case filterTypes.all: return todos;\n      default: return todos;\n    }\n  }\n\n  setCurrentFilter = (filter) => {\n    const { filterTypes } = this.state;\n\n    this.setState({\n      currentFilter: filterTypes[filter],\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      currentFilter,\n      filterTypes,\n    } = this.state;\n    const visibleTodos = this.getFilteredTodos(currentFilter);\n\n    return (\n      <section className=\"todoapp\">\n        <NewTodo\n          addTodo={this.addTodo}\n        />\n        <TodoList\n          todos={todos}\n          visibleTodos={visibleTodos}\n          selectAllTodos={this.selectAllTodos}\n          deleteTodo={this.deleteTodo}\n          toggleTodoCompleted={this.toggleTodoCompleted}\n          handleKeyPress={this.handleKeyPress}\n          editChangeHanlder={this.editChangeHanlder}\n          editTodo={this.editTodo}\n          setEditedValue={this.setEditedValue}\n        />\n        <Footer\n          todos={todos}\n          clearCompletedHandler={this.clearCompletedHandler}\n          setCurrentFilter={this.setCurrentFilter}\n          filterTypes={filterTypes}\n          currentFilter={currentFilter}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}