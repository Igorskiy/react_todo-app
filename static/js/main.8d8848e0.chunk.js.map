{"version":3,"sources":["NewTodo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["NewTodo","_ref","valueTitle","InputChangeHandler","addTodoHandler","react_default","a","createElement","className","onSubmit","type","placeholder","value","onChange","TodoList","visibleTodos","todos","selectAllHandler","removeHandler","toggleHandler","cn","hidden","length","checked","every","todo","completed","id","htmlFor","map","key","concat","title","onClick","Footer","clearCompletedHandler","filterHandler","filters","activeFilterIndex","filter","i","href","selected","App","state","filterName","_this","setState","allSelected","Object","objectSpread2","event","target","preventDefault","toConsumableArray","Date","now","isCompleted","todoId","getFilterTodo","currentFilter","_this$state","this","src_NewTodo","src_TodoList","src_Footer","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8d8848e0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewTodo = ({ valueTitle, InputChangeHandler, addTodoHandler }) => (\n  <header className=\"header\">\n    <form onSubmit={addTodoHandler}>\n      <h1>todos</h1>\n\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={valueTitle}\n        onChange={InputChangeHandler}\n      />\n    </form>\n  </header>\n\n);\n\nNewTodo.propTypes = {\n  valueTitle: PropTypes.string.isRequired,\n  InputChangeHandler: PropTypes.func.isRequired,\n  addTodoHandler: PropTypes.func.isRequired,\n};\nexport default NewTodo;\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst mark = 'Mark all as complete';\n\nconst TodoList = ({\n  visibleTodos,\n  todos,\n  selectAllHandler,\n  removeHandler,\n  toggleHandler,\n}) => (\n\n  <section className={cn(\n    'main',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    <input\n      type=\"checkbox\"\n      onChange={selectAllHandler}\n      checked={todos.every(todo => todo.completed)}\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n    />\n    <label htmlFor=\"toggle-all\">{mark}</label>\n    <ul className=\"todo-list\">\n      {visibleTodos.map(todo => (\n        <li key={todo.id}>\n          <li\n            className={cn(\n              { completed: todo.completed }\n            )}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                checked={todo.completed}\n                onChange={() => toggleHandler(todo.id)}\n              />\n              <label\n                htmlFor={`todo-${todo.id}`}\n              >\n                {todo.title}\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => removeHandler(todo.id)}\n                className=\"destroy\"\n              />\n            </div>\n          </li>\n\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  selectAllHandler: PropTypes.func.isRequired,\n  removeHandler: PropTypes.func.isRequired,\n  toggleHandler: PropTypes.func.isRequired,\n  visibleTodos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst Footer = ({\n  todos,\n  clearCompletedHandler,\n  filterHandler,\n  filters,\n  activeFilterIndex,\n}) => (\n  <footer className={cn(\n    'footer',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    {\n      (todos.filter(todo => !todo.completed).length === 1)\n        ? (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} item left`}\n          </span>\n        )\n        : (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} items left`}\n          </span>\n        )\n    }\n\n    <ul className=\"filters\">\n      {filters.map((filter, i) => (\n        <li key={filter}>\n          <a\n            href={`#/${filter}`}\n            onClick={() => filterHandler(filter, i)}\n            className={cn(\n              { selected: i === activeFilterIndex }\n            )}\n          >\n            {filter}\n          </a>\n        </li>\n      ))}\n    </ul>\n\n    <button\n      type=\"button\"\n      className={cn(\n        'clear-completed',\n        { hidden: todos.filter(todo => todo.completed).length === 0 }\n      )}\n      onClick={clearCompletedHandler}\n    >\n    clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  clearCompletedHandler: PropTypes.func.isRequired,\n  filterHandler: PropTypes.func.isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.string).isRequired,\n  activeFilterIndex: PropTypes.number.isRequired,\n};\nexport default Footer;\n","import React from 'react';\nimport NewTodo from './NewTodo';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filters: ['all', 'active', 'completed'],\n    valueTitle: '',\n    filterName: '',\n    activeFilterIndex: 0,\n  }\n\n  selectAllHandler = () => {\n    this.setState((state) => {\n      const allSelected = state.todos.every(todo => todo.completed);\n\n      return {\n        todos: state.todos.map(todo => ({\n          ...todo,\n          completed: !allSelected,\n        })),\n      };\n    });\n  }\n\n  InputChangeHandler = (event) => {\n    this.setState({\n      valueTitle: event.target.value,\n    });\n  };\n\n  addTodoHandler = (event) => {\n    event.preventDefault();\n    if (this.state.valueTitle) {\n      this.setState(state => ({\n        todos: [\n          ...state.todos,\n          {\n            id: +Date.now(),\n            title: state.valueTitle,\n            completed: state.isCompleted,\n          },\n        ],\n        valueTitle: '',\n      }));\n    }\n  }\n\n  toggleHandler = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  removeHandler = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  clearCompletedHandler = () => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  getFilterTodo = (currentFilter) => {\n    const { todos } = this.state;\n\n    switch (currentFilter) {\n      case 'completed': return todos.filter(todo => todo.completed);\n      case 'active': return todos.filter(todo => !todo.completed);\n      case 'all': return todos;\n      default: return todos;\n    }\n  }\n\n  filterHandler = (filter, i) => {\n    this.setState({\n      filterName: filter,\n      activeFilterIndex: i,\n    });\n  }\n\n  render() {\n    const { todos,\n      valueTitle,\n      filterName,\n      filters,\n      activeFilterIndex } = this.state;\n    const visibleTodos = this.getFilterTodo(filterName);\n\n    return (\n      <section className=\"todoapp\">\n        <NewTodo\n          todos={todos}\n          valueTitle={valueTitle}\n          InputChangeHandler={this.InputChangeHandler}\n          addTodoHandler={this.addTodoHandler}\n        />\n        <TodoList\n          todos={todos}\n          visibleTodos={visibleTodos}\n          selectAllHandler={this.selectAllHandler}\n          removeHandler={this.removeHandler}\n          toggleHandler={this.toggleHandler}\n        />\n        <Footer\n          todos={todos}\n          clearCompletedHandler={this.clearCompletedHandler}\n          filterHandler={this.filterHandler}\n          filters={filters}\n          activeFilterIndex={activeFilterIndex}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}