{"version":3,"sources":["NewTodo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["NewTodo","state","valueTitle","inputChangeHandler","event","_this","setState","target","value","submitHandler","preventDefault","prevState","trim","props","addTodo","id","Date","now","title","completed","editable","this","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","onBlur","React","Component","TodoList","_ref","visibleTodos","todos","selectAllTodos","deleteTodo","handleKeyPress","editTodo","editChangeHandler","setEditedValue","toggleTodoCompleted","editValue","cn","hidden","length","checked","every","todo","htmlFor","map","key","editing","onDoubleClick","concat","onClick","autoFocus","defaultValue","onKeyDown","e","Footer","clearCompletedHandler","setCurrentFilter","currentFilter","filterTypes","filter","Object","values","href","selected","App","undefined","localStorage","toConsumableArray","JSON","parse","all","active","objectSpread2","allSelected","getFilteredTodos","_this$state","setItem","stringify","_this$state2","src_NewTodo","src_TodoList","src_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d52dd6f0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = { valueTitle: '' }\n\n  inputChangeHandler = (event) => {\n    this.setState({\n      valueTitle: event.target.value,\n    });\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (!prevState.valueTitle) {\n        return prevState.valueTitle;\n      }\n\n      if (prevState.valueTitle.trim() === '') {\n        return '';\n      }\n\n      this.props.addTodo({\n        id: Date.now(),\n        title: prevState.valueTitle,\n        completed: false,\n        editable: false,\n      });\n\n      return { valueTitle: '' };\n    });\n  };\n\n  render() {\n    const { valueTitle } = this.state;\n\n    return (\n      <header className=\"header\">\n        <form onSubmit={this.submitHandler}>\n          <h1>todos</h1>\n\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={valueTitle}\n            onChange={this.inputChangeHandler}\n            onBlur={this.submitHandler}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\nexport default NewTodo;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst mark = 'Mark all as complete';\n\nconst TodoList = ({\n  visibleTodos,\n  todos,\n  selectAllTodos,\n  deleteTodo,\n  handleKeyPress,\n  editTodo,\n  editChangeHandler,\n  setEditedValue,\n  toggleTodoCompleted,\n  editValue,\n}) => (\n  <section className={cn(\n    'main',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    <input\n      type=\"checkbox\"\n      onChange={selectAllTodos}\n      checked={todos.every(todo => todo.completed)}\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n    />\n    <label htmlFor=\"toggle-all\">{mark}</label>\n    <ul className=\"todo-list\">\n      {visibleTodos.map(todo => (\n        <li key={todo.id}>\n          <li\n            className={cn(\n              {\n                completed: todo.completed,\n                editing: todo.editable,\n              }\n            )}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={todo.id}\n                checked={todo.completed}\n                onChange={() => toggleTodoCompleted(todo.id)}\n              />\n              <label\n                onDoubleClick={() => editTodo(todo.id)}\n                htmlFor={`todo-${todo.id}`}\n              >\n                {todo.title}\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => deleteTodo(todo.id)}\n                className=\"destroy\"\n              />\n            </div>\n            {todo.editable && (\n              <input\n                type=\"text\"\n                className=\"edit\"\n                autoFocus\n                defaultValue={todo.title}\n                onChange={editChangeHandler}\n                onKeyDown={\n                  e => handleKeyPress(e, todo.id, editValue)\n                }\n                onBlur={\n                  e => setEditedValue(e, todo.id, editValue)\n                }\n              />\n            )\n            }\n          </li>\n\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  editValue: PropTypes.string.isRequired,\n  editChangeHandler: PropTypes.func.isRequired,\n  selectAllTodos: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodoCompleted: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n  visibleTodos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst Footer = ({\n  todos,\n  clearCompletedHandler,\n  setCurrentFilter,\n  currentFilter,\n  filterTypes,\n}) => (\n  <footer className={cn(\n    'footer',\n    { hidden: todos.length === 0 }\n  )}\n  >\n    {\n      (todos.filter(todo => !todo.completed).length === 1)\n        ? (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} item left`}\n          </span>\n        )\n        : (\n          <span className=\"todo-count\">\n            {`${todos.filter(todo => !todo.completed).length} items left`}\n          </span>\n        )\n    }\n\n    <ul className=\"filters\">\n      {Object.values(filterTypes).map(filter => (\n        <li key={filter}>\n          <a\n            href={`#/${filter}`}\n            onClick={() => setCurrentFilter(filter)}\n            className={cn(\n              { selected: currentFilter === filterTypes[filter] }\n            )}\n          >\n            {filter}\n          </a>\n        </li>\n      ))}\n    </ul>\n\n    <button\n      type=\"button\"\n      className={cn(\n        'clear-completed',\n        { hidden: todos.filter(todo => todo.completed).length === 0 }\n      )}\n      onClick={clearCompletedHandler}\n    >\n    clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  clearCompletedHandler: PropTypes.func.isRequired,\n  setCurrentFilter: PropTypes.func.isRequired,\n  todos: PropTypes\n    .arrayOf(PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    })).isRequired,\n  currentFilter: PropTypes.string.isRequired,\n  filterTypes: PropTypes.objectOf(PropTypes.string).isRequired,\n};\nexport default Footer;\n","import React from 'react';\nimport NewTodo from './NewTodo';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: (() => {\n      if (localStorage.todos !== undefined) {\n        return [...JSON.parse(localStorage.todos)];\n      }\n\n      return [];\n    })(),\n\n    currentFilter: 'all',\n    filterTypes: {\n      all: 'all',\n      completed: 'completed',\n      active: 'active',\n    },\n    editValue: '',\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  }\n\n  editChangeHandler = ({ target }) => {\n    this.setState({\n      editValue: target.value,\n    });\n  }\n\n  setEditedValue = (event, id, value) => {\n    if (!event.target.value || event.target.value.trim() === '') {\n      this.deleteTodo(id);\n    }\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: value || todo.title,\n          editable: false,\n        };\n      }),\n      editValue: '',\n    }));\n  }\n\n  editTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return {\n            ...todo,\n            editable: false,\n          };\n        }\n\n        return {\n          ...todo,\n          editable: true,\n        };\n      }),\n    }));\n  };\n\n  handleKeyPress = (event, id, value) => {\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          editable: false,\n        })),\n      }));\n    } else if (event.key === 'Enter') {\n      this.setEditedValue(event, id, value);\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  selectAllTodos = () => {\n    this.setState((prevState) => {\n      const allSelected = prevState.todos.every(todo => todo.completed);\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: !allSelected,\n        })),\n      };\n    });\n  }\n\n  toggleTodoCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  clearCompletedHandler = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  getFilteredTodos = (currentFilter) => {\n    const { todos, filterTypes } = this.state;\n\n    switch (currentFilter) {\n      case filterTypes.completed: return todos.filter(todo => todo.completed);\n      case filterTypes.active: return todos.filter(todo => !todo.completed);\n      case filterTypes.all: return todos;\n      default: return todos;\n    }\n  }\n\n  setCurrentFilter = (filter) => {\n    const { filterTypes } = this.state;\n\n    this.setState({\n      currentFilter: filterTypes[filter],\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      currentFilter,\n      filterTypes,\n      editValue,\n    } = this.state;\n    const visibleTodos = this.getFilteredTodos(currentFilter);\n\n    return (\n      <section className=\"todoapp\">\n        <NewTodo\n          addTodo={this.addTodo}\n        />\n        <TodoList\n          todos={todos}\n          editValue={editValue}\n          visibleTodos={visibleTodos}\n          selectAllTodos={this.selectAllTodos}\n          deleteTodo={this.deleteTodo}\n          toggleTodoCompleted={this.toggleTodoCompleted}\n          handleKeyPress={this.handleKeyPress}\n          editTodo={this.editTodo}\n          setEditedValue={this.setEditedValue}\n          editChangeHandler={this.editChangeHandler}\n        />\n        <Footer\n          todos={todos}\n          clearCompletedHandler={this.clearCompletedHandler}\n          setCurrentFilter={this.setCurrentFilter}\n          filterTypes={filterTypes}\n          currentFilter={currentFilter}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}